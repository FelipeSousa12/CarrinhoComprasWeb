{"ast":null,"code":"import api from '../../../services/api';\nimport history from '../../../services/history';\nimport { call, select, put, all, takeLatest } from 'redux-saga/effects';\nimport { addToCartSuccess, updateAmountSuccess } from './actions';\nimport { formatPrice } from '../../../util/format';\nimport { toast } from 'react-toastify';\n\nfunction* addToCart({\n  id\n}) {\n  const productExists = yield select(state => state.cart.find(p => p.id === id));\n  const stock = yield call(api.get, `/stock/${id}`);\n  const stockAmount = stock.data.amount;\n  const currentAmount = productExists ? productExists.amount : 0;\n  const amount = currentAmount + 1;\n\n  if (amount > stockAmount) {\n    toast.error('Out of stock!');\n    return;\n  }\n\n  if (productExists) {\n    yield put(updateAmountSuccess(id, amount));\n  } else {\n    const response = yield call(api.get, `/products/${id}`);\n    const data = { ...response.data,\n      amount: 1,\n      priceFormatted: formatPrice(response.data.price)\n    };\n    yield put(addToCartSuccess(data));\n    history.push('/cart');\n  }\n}\n\nfunction* updateAmount({\n  id,\n  amount\n}) {\n  if (amount <= 0) return;\n  const stock = yield call(api.get, `stock/${id}`);\n  const stockAmount = stock.data.amount;\n\n  if (amount > stockAmount) {\n    toast.error('Out of stock!');\n    return;\n  }\n\n  yield put(updateAmountSuccess(id, amount));\n}\n\nexport default all([takeLatest('@cart/ADD_REQUEST', addToCart), takeLatest('@cart/UPDATE_AMOUNT_REQUEST', updateAmount)]);","map":{"version":3,"sources":["D:/ProjectsReact/e-commerce/src/store/modules/cart/sagas.js"],"names":["api","history","call","select","put","all","takeLatest","addToCartSuccess","updateAmountSuccess","formatPrice","toast","addToCart","id","productExists","state","cart","find","p","stock","get","stockAmount","data","amount","currentAmount","error","response","priceFormatted","price","push","updateAmount"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,uBAAhB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,GAAvB,EAA4BC,GAA5B,EAAiCC,UAAjC,QAAmD,oBAAnD;AACA,SAASC,gBAAT,EAA2BC,mBAA3B,QAAsD,WAAtD;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,KAAT,QAAsB,gBAAtB;;AAEA,UAAUC,SAAV,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAA4B;AAC1B,QAAMC,aAAa,GAAG,MAAMV,MAAM,CAChCW,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACL,EAAF,KAASA,EAA9B,CADuB,CAAlC;AAIA,QAAMM,KAAK,GAAG,MAAMhB,IAAI,CAACF,GAAG,CAACmB,GAAL,EAAW,UAASP,EAAG,EAAvB,CAAxB;AAEA,QAAMQ,WAAW,GAAGF,KAAK,CAACG,IAAN,CAAWC,MAA/B;AAEA,QAAMC,aAAa,GAAGV,aAAa,GAAGA,aAAa,CAACS,MAAjB,GAA0B,CAA7D;AAEA,QAAMA,MAAM,GAAGC,aAAa,GAAG,CAA/B;;AAEA,MAAID,MAAM,GAAGF,WAAb,EAA0B;AACxBV,IAAAA,KAAK,CAACc,KAAN,CAAY,eAAZ;AACA;AACD;;AAED,MAAIX,aAAJ,EAAmB;AAEjB,UAAMT,GAAG,CAACI,mBAAmB,CAACI,EAAD,EAAKU,MAAL,CAApB,CAAT;AAED,GAJD,MAIO;AACL,UAAMG,QAAQ,GAAG,MAAMvB,IAAI,CAACF,GAAG,CAACmB,GAAL,EAAW,aAAYP,EAAG,EAA1B,CAA3B;AAEA,UAAMS,IAAI,GAAG,EACX,GAAGI,QAAQ,CAACJ,IADD;AAEXC,MAAAA,MAAM,EAAE,CAFG;AAGXI,MAAAA,cAAc,EAAEjB,WAAW,CAACgB,QAAQ,CAACJ,IAAT,CAAcM,KAAf;AAHhB,KAAb;AAMA,UAAMvB,GAAG,CAACG,gBAAgB,CAACc,IAAD,CAAjB,CAAT;AACApB,IAAAA,OAAO,CAAC2B,IAAR,CAAa,OAAb;AACD;AACF;;AAED,UAAUC,YAAV,CAAuB;AAAEjB,EAAAA,EAAF;AAAMU,EAAAA;AAAN,CAAvB,EAAuC;AACrC,MAAIA,MAAM,IAAI,CAAd,EAAiB;AAEjB,QAAMJ,KAAK,GAAG,MAAMhB,IAAI,CAACF,GAAG,CAACmB,GAAL,EAAW,SAAQP,EAAG,EAAtB,CAAxB;AAEA,QAAMQ,WAAW,GAAGF,KAAK,CAACG,IAAN,CAAWC,MAA/B;;AAEA,MAAIA,MAAM,GAAGF,WAAb,EAA0B;AACxBV,IAAAA,KAAK,CAACc,KAAN,CAAY,eAAZ;AACA;AACD;;AAED,QAAMpB,GAAG,CAACI,mBAAmB,CAACI,EAAD,EAAKU,MAAL,CAApB,CAAT;AACD;;AAED,eAAejB,GAAG,CAAC,CACjBC,UAAU,CAAC,mBAAD,EAAsBK,SAAtB,CADO,EAEjBL,UAAU,CAAC,6BAAD,EAAgCuB,YAAhC,CAFO,CAAD,CAAlB","sourcesContent":["import api from '../../../services/api';\nimport history from '../../../services/history';\nimport { call, select, put, all, takeLatest } from 'redux-saga/effects';\nimport { addToCartSuccess, updateAmountSuccess } from './actions';\nimport { formatPrice } from '../../../util/format';\nimport { toast } from 'react-toastify';\n\nfunction* addToCart({ id }) {\n  const productExists = yield select(\n    state => state.cart.find(p => p.id === id),\n  );\n\n  const stock = yield call(api.get, `/stock/${id}`);\n\n  const stockAmount = stock.data.amount;\n\n  const currentAmount = productExists ? productExists.amount : 0;\n\n  const amount = currentAmount + 1;\n\n  if (amount > stockAmount) {\n    toast.error('Out of stock!')\n    return;\n  }\n\n  if (productExists) {\n\n    yield put(updateAmountSuccess(id, amount))\n\n  } else {\n    const response = yield call(api.get, `/products/${id}`);\n\n    const data = {\n      ...response.data,\n      amount: 1,\n      priceFormatted: formatPrice(response.data.price),\n    }\n\n    yield put(addToCartSuccess(data));\n    history.push('/cart');\n  }\n}\n\nfunction* updateAmount({ id, amount }) {\n  if (amount <= 0) return;\n\n  const stock = yield call(api.get, `stock/${id}`);\n\n  const stockAmount = stock.data.amount;\n\n  if (amount > stockAmount) {\n    toast.error('Out of stock!')\n    return;\n  }\n\n  yield put(updateAmountSuccess(id, amount));\n}\n\nexport default all([\n  takeLatest('@cart/ADD_REQUEST', addToCart),\n  takeLatest('@cart/UPDATE_AMOUNT_REQUEST', updateAmount)\n])\n"]},"metadata":{},"sourceType":"module"}